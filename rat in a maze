
class Solution{
    public:
    void solve(int i, int j, vector<string>&ans, string move, vector<vector<int>>&vis, vector<vector<int>> &m, int n){
        
     if(i==n-1 && j ==n-1){
         ans.push_back(move);
         return;
     }
     
        //downward
        if(i+1 <n && !vis[i+1][j] && m[i+1][j] == 1){
            vis[i][j] = 1;
            solve(i+1, j, ans, move+ 'D', vis,m, n);
            vis[i][j] = 0;
        }
        
        //left
        if(j-1>=0 && !vis[i][j-1] && m[i][j-1] == 1){
            vis[i][j] = 1;
            solve(i, j-1, ans, move + 'L', vis,m, n);
            vis[i][j] = 0;
        }
        
        //right
          if(j+1<n && !vis[i][j+1] && m[i][j+1] == 1){
            vis[i][j] = 1;
            solve(i, j+1, ans, move + 'R', vis,m, n);
            vis[i][j] = 0;
        }
        
        //up
            if(i-1>=0 && !vis[i-1][j] && m[i-1][j] == 1){
            vis[i][j] = 1;
            solve(i-1, j, ans, move + 'U', vis,m, n);
            vis[i][j] = 0;
        }
    
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<string>ans;
        
        vector<vector<int>>vis(n, vector<int>(n,0));
        
        if(m[0][0]==1){
            solve(0,0, ans, "", vis, m, n);
        }
        return ans;
    }
};
