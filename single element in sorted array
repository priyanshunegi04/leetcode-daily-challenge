   int singleNonDuplicate(vector<int>& nums) {
        int s = 0;
        int e = nums.size(); 
        
      if(e==1)return nums[0];
      if(nums[0] !=  nums[1])return nums[0];   
      if(nums[e-1] != nums[e-2])return nums[e-1];  
       int end = e-1; 
        int ans = -1;
        while(s<=end){
          int mid = s + (end-s) / 2;    
          if(nums[mid] != nums[mid-1] && nums[mid] != nums[mid+1]){
              ans = nums[mid];
              break;
          }  
          else if( mid % 2 == 0){
              // left half
              if(nums[mid] == nums[mid+1]){
                  s =  mid + 1;
              }
              //right half
              else if(nums[mid]== nums[mid-1] ){
                  end = mid - 1;
              }
          }  
         else if(mid % 2 == 1){
             //left half
             if(nums[mid] == nums[mid-1]){
                 s = mid + 1;
             }
             // right half
             if(nums[mid] == nums[mid+1]){
                 end = mid - 1;
             }
         }   
        }
        return ans;
    }
