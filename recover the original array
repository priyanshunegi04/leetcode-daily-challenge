class Solution {
public:
     bool check(multiset<int>ms, int k, vector<int>&ans){
     while(!ms.empty()){
       int el = *ms.begin();  
       int highest = el + 2*k;  
         
         if(ms.find(highest) == ms.end()){
             return false;
         }
         //erase iterator and do not erase elements.
       ms.erase(ms.begin());  
        auto it = ms.find(highest); 
       ans.push_back(el+k);  
         ms.erase(it);
     } 
      return true;
     }  
    
    vector<int> recoverArray(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        multiset<int>ms(nums.begin(), nums.end());
        
        int lowest = nums[0];
        int n = nums.size();
     
        for(int i=1; i<n; i++){
            vector<int>ans;
            int highest = nums[i];    
            if( (highest-lowest) % 2 == 0 ){
            
                int k =  (highest - lowest)/2;                
                  if(k && check(ms, k, ans)){
                      return ans;
                  } 
            }
        }
        return {};
    }
};
