    ListNode* reverse(ListNode* head){
        
        if(head==NULL){
            return NULL;
        }
        
        ListNode *prev = NULL;
        ListNode *curr = head;
        ListNode *forward = NULL;
        
        while(curr!=NULL){
            forward = curr->next;
            curr->next = prev;
            prev = curr;
            curr = forward;
        }
        return prev;
    
    }
    
    ListNode* getmid(ListNode* &head){
              
       ListNode *slow = head;
       ListNode *fast = head->next; 
        
        while(fast!=NULL &&fast->next!=NULL){
            fast = fast->next->next;
            
            slow = slow->next;
        }
        return slow;
    }

    bool isPalindrome(ListNode* head) {
        //step1-> find middle element of linked list
        if(head->next==NULL){
            return true;
        }
        
        
        ListNode *mid = getmid(head);
        //ste2->reverse linked list after middle element.
        ListNode *temp = mid->next;
        mid->next = reverse(temp); 
        //step3->compare
        
        ListNode *head1 = head;
        ListNode *head2 = mid->next;
        
        while(head2!=NULL){
            
            if(head1->val != head2->val){
                return false;
            }
                head1= head1->next;
                head2 = head2->next;

        }
        
        temp = mid->next;
        mid->next = reverse(temp);
        return true;
    }
