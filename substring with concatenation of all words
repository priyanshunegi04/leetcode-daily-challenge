 //for 1st test case
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int>ans;
        int n = words.size();
        int m = words[0].size();
        int total = m*n;
        if(s.size() < total){
            return ans;
        }
        //starting point 6-- 6 ke gap honge
        for(int i=0; i<=s.size()-total; i++){
            unordered_map<string, int>mp;
            // mapping of all strings  present in words array;
            for(int j=0; j<words.size(); j++){
                mp[words[j]]++;
            }
           int k =0; 
           for(k = 0; k<n; k++){
               //6 length ki string uthai .
               //3 length mei divide krkr check krenge.
               string temp = s.substr(i+k*m, m);
               if(mp.count(temp) == 0){
                   break;
               } 
              else{
                  if(mp[temp] != 0){
                      mp[temp]--;
                  }
                  else{
                      break;
                  }
              } 
           } 
            //put starting index;
       if(k==n){
           ans.push_back(i);
       } 
        }
    return ans;
    }
