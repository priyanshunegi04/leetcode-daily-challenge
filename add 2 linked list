class Solution {
public:
    
    //<---------------------Insertion from tail of linked list------>

    void insertAtTail(ListNode* &head, ListNode* &tail, int data){
        ListNode* temp = new ListNode(data);
        if(head==NULL){
            head = temp;
            tail = temp;
        }
        
        else{
            tail->next = temp;
             tail = temp;
        }
        
    }
//<-----------------ADD FUNCTION----------------------------------->
    
    ListNode* add(ListNode*l1, ListNode*l2){
    
        int carry = 0;
        //create anshead , as we will be returning it, and inititalise it
        //with NULL pointer.
        
     ListNode *anshead = NULL;   
     ListNode *anstail = NULL;   
    //<--------------ANALOGY--------->
    //when we add 2 numbers say it as 23 + 47.
        //we add 3 + 7 , we get 10 out of which 1 is carry.
        // and 0 becomes digit of answer.
        //carry is added to 2+4+1 ,that is 7.
        //and 7 become a digit of our answer.
        //combined together 70 is our answer.

        // same thing is applied here.
  //<--------ALGO---------------->      
        /*
        1. calculate sum.
        2. take out digit from sum . digit = sum % 10;
        3. create a node from digit.
        4. take out carry.   carry = sum/10.
        5.and move pointers.
        */
        
     while(l1!= NULL  && l2!=NULL ){
              
         int sum = carry + l1->val + l2->val;
         int digit = sum % 10;
         insertAtTail(anshead, anstail, digit);
         carry = sum/10;
         l1= l1->next;
         l2= l2->next;
         
     }    
     // if all elements of list2 are used.
        //and list1 has some elements left.
        
     while(l1!=NULL){
         int sum = carry + l1->val;
         int digit = sum % 10;
         insertAtTail(anshead, anstail, digit);
         carry = sum/10;
         l1= l1->next;
     }      
    // if all elements of list1 are used.    
    // and list2 has some elements left.
        
         while(l2!=NULL){
         int sum = carry + l2->val;
         int digit = sum % 10;
         insertAtTail(anshead, anstail, digit);
         carry = sum/10;
         l2= l2->next;
     }      
      //if both lists are used and carry is still present.    
         while(carry!=0){
         int sum = carry ;
         int digit = sum % 10;
         insertAtTail(anshead, anstail, digit);
         carry = sum/10;
     }      
          return anshead;
    }
    
    
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        ListNode*ans = add(l1, l2);
        return ans;
    }
};
