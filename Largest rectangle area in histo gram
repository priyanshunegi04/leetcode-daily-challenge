class Solution {
public:
  vector<int>nextSmallerElement(vector<int>& heights, int n){
    vector<int>ans(n);    
    stack<int>s;    
    s.push(-1);    
        
      for(int i=n-1; i>=0; i--){
          int curr = i;
          while(s.top()!=-1 && heights[s.top()] >= heights[curr]){
              s.pop();
          }
          ans[i] = s.top();
          s.push(i);
      }
     return ans;
    }
    
    vector<int>prevSmallerElement(vector<int>& heights, int n){      
    vector<int>ans(n);    
    stack<int>s;    
    s.push(-1);    
        
      for(int i=0; i<n; i++){
          int curr = i;
          while(s.top()!=-1 && heights[s.top()] >= heights[curr]){
              s.pop();
          }
          ans[i] = s.top();
          s.push(i);
      }
     return ans;
  }
    
    int largestRectangleArea(vector<int>& heights) {
        
        int n = heights.size();
        vector<int>next(n);
        next = nextSmallerElement(heights, n);
        
        vector<int>prev(n);
        prev = prevSmallerElement(heights, n);
        
        int area = -1e9;
        for(int i=0; i<n; i++){
            int length = heights[i];
            //to handle duplicate cases
            if(next[i] == -1){
                next[i] = n;
            }
            
            int breadth = next[i] - prev[i] - 1;
            
            int newAns = length * breadth;
            area = max(area, newAns);
        }
    return area;
    }
};
