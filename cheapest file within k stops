int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        
        vector<pair<int, int>>adj[n];
        for(auto it: flights){
            adj[it[0]].push_back({it[1], it[2]});
        }
        //stops,nodes, dist
        
        queue<pair<int,pair<int,int>>>q;
        q.push({0,{src,0}});
        
        vector<int>dis(n, 1e9);
        dis[src] = 0;
        
        while(!q.empty()){
        
        auto it = q.front();
         q.pop();   
            
        int stops = it.first;     
        int nodes = it.second.first;    
        int dist = it.second.second;    
            if(stops>k)continue;
            
           for(auto it: adj[nodes]){
               int childnode = it.first;
               int distofchild = it.second;
                
             if(dist + distofchild < dis[childnode] && stops<=k){
                 dis[childnode] = dist + distofchild;
                 q.push({stops+1, {childnode, dis[childnode]}});     
             } 
           } 
        }
        
        if(dis[dst] ==1e9)return -1;
        return dis[dst];
    }
